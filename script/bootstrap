#!/bin/bash

# Bootstrap script for new machines
# Usage: curl -fsSL <raw-url>/bootstrap | bash
# Clones dotfiles repo and runs setup

set -euo pipefail

# dotfiles 函數（替代 alias）
dotfiles() {
    /usr/bin/git --git-dir="$HOME/.dotfiles/" --work-tree="$HOME" "$@"
}

_install_homebrew() {
    if ! command -v brew &>/dev/null; then
        echo "Installing Homebrew..."
        if /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; then
            echo "✅ Homebrew installed successfully"
            
            if [[ $(uname -m) == "arm64" ]]; then
                # 讓後續步驟能找到 brew
                export PATH="/opt/homebrew/bin:$PATH"
            fi
        else
            echo "❌ Failed to install Homebrew"
            exit 1
        fi
    else
        echo "✅ Homebrew already installed"
    fi
}

_install_git() {
    if ! command -v git &>/dev/null; then
        echo "Installing Git..."
        if brew install git; then
            echo "✅ Git installed successfully"
        else
            echo "❌ Failed to install Git"
            exit 1
        fi
    else
        echo "✅ Git already installed"
    fi
}

_clone_dotfiles() {
    local dotfiles_dir="$HOME/.dotfiles"
    
    if [ ! -d "$dotfiles_dir" ]; then
        echo "Cloning dotfiles repository..."
        if git clone --bare https://github.com/hsin19/dotfiles.git "$dotfiles_dir"; then
            echo "✅ Dotfiles repository cloned successfully"
        else
            echo "❌ Failed to clone dotfiles repository"
            exit 1
        fi
    else
        echo "✅ Dotfiles repository already exists"
    fi

    dotfiles config --local status.showUntrackedFiles no
}

_handle_conflicts() {
    local operation="$1"
    local output="$2"
    local backup_dir="$HOME/config-backup"
    
    local operation_backup_dir
    operation_backup_dir="$backup_dir/$operation-conflicts-$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$operation_backup_dir"

    local found=0
    while IFS= read -r raw; do
        line="${raw#"${raw%%[![:space:]]*}"}"
        line="${line%"${line##*[![:space:]]}"}"

        [ -z "$line" ] && continue

        case "$line" in
            error:*|fatal:*|warning:*|hint:*|Please*|Aborting*|From*|Updating*|"* branch "*|"* -> "*)
                continue
                ;;
        esac

        line="${line#./}"

        src=""
        if [ -e "$HOME/$line" ] || [ -L "$HOME/$line" ]; then
            src="$HOME/$line"
        else
            continue
        fi

        found=1
        dst="$operation_backup_dir/$line"
        mkdir -p "$(dirname "$dst")"
        mv -- "$src" "$dst"
        echo "ℹ️  Backed up: $line"
    done <<< "$output"

    if [ "$found" -eq 1 ]; then
        return 0
    else
        echo "⚠️ No conflicts found"
        return 1
    fi
}

_checkout_dotfiles() {
    echo "Attempting dotfiles checkout..."
    
    if ! checkout_output=$(dotfiles checkout 2>&1); then
        if _handle_conflicts "checkout" "$checkout_output"; then
            if dotfiles checkout; then
                echo "✅ Dotfiles checked out successfully (conflicts backed up)"
            else
                echo "❌ Dotfiles checkout failed"
                exit 1
            fi
        fi
    else
        echo "✅ Dotfiles checked out successfully"
    fi
    
    # Pull latest changes
    echo "Pulling latest dotfiles updates..."
    if ! pull_output=$(dotfiles pull 2>&1); then
        # Check if it's a merge conflict
        if echo "$pull_output" | grep -q "would be overwritten\|Merge conflict"; then
            if _handle_conflicts "pull" "$pull_output"; then
                # Reset and pull again
                dotfiles reset --hard HEAD
                if dotfiles pull; then
                    echo "✅ Dotfiles updated to latest version (conflicts backed up)"
                else
                    echo "⚠️ Still failed to pull updates after reset"
                fi
            fi
        else
            echo "⚠️ Failed to pull latest updates: $pull_output"
        fi
    else
        echo "✅ Dotfiles updated to latest version"
    fi
}

main() {
    echo "Starting dotfiles bootstrap..."
    
    # 執行安裝步驟
    _install_homebrew
    _install_git
    _clone_dotfiles
    _checkout_dotfiles

    echo "✅ Dotfiles bootstrap completed successfully!"
    echo "You may need to restart your terminal to see all changes."
}

main "$@"