#!/bin/bash

# Personal git hooks installer
# Usage: ./setup-git-hook [path] or git setup-hook [path]
# Args: repo path (optional, defaults to current dir)

set -euo pipefail

_setup_prepare_commit_msg_hook() {
    local repo_path="${1:-.}"
    local hook_file="$repo_path/.git/hooks/prepare-commit-msg"
    
    mkdir -p "$repo_path/.git/hooks"

    if [ -f "$hook_file" ]; then
        # Check if our hook is already present
        if grep -q "DOTFILES HOOK START" "$hook_file"; then
            echo "‚úÖ prepare-commit-msg hook already configured in $(basename "$repo_path")"
            return 0
        fi
        
        # Check if existing file uses bash
        if ! head -1 "$hook_file" | grep -q "bash"; then
            echo "‚ö†Ô∏è  Warning: Existing hook doesn't use bash, may cause compatibility issues"
        fi
        
        # Backup existing hook
        cp "$hook_file" "$hook_file.backup.$(date +%Y%m%d_%H%M%S)"
        echo "üì¶ Backed up existing prepare-commit-msg hook in $(basename "$repo_path")"
    else
        # Create new empty hook file with shebang
        echo "#!/bin/bash" > "$hook_file"
        echo "" >> "$hook_file"
    fi

    local hook_content='
# === DOTFILES HOOK START ===
# Auto-generated by dotfiles setup
# Call external prepare-commit-msg script if it exists
EXTERNAL_SCRIPT="$HOME/script/prepare-commit-msg"

if [ -f "$EXTERNAL_SCRIPT" ] && [ -x "$EXTERNAL_SCRIPT" ]; then
    "$EXTERNAL_SCRIPT" "$@"
fi
# === DOTFILES HOOK END ==='
    echo "$hook_content" >> "$hook_file"

    # Make it executable
    chmod +x "$hook_file"
    echo "‚úÖ prepare-commit-msg hook configured in $(basename "$repo_path")"
}

_remove_prepare_commit_msg_hook() {
    local repo_path="${1:-.}"
    local hook_file="$repo_path/.git/hooks/prepare-commit-msg"

    if [ ! -f "$hook_file" ]; then
        echo "‚ÑπÔ∏è  No prepare-commit-msg hook found in $(basename "$repo_path")"
        return 0
    fi

    if grep -q "DOTFILES HOOK START" "$hook_file"; then
        # Backup existing hook
        cp "$hook_file" "$hook_file.backup.$(date +%Y%m%d_%H%M%S)"
        echo "üì¶ Backed up prepare-commit-msg hook in $(basename "$repo_path")"

        # Remove DOTFILES block
        sed -i.bak '/# === DOTFILES HOOK START ===/,/# === DOTFILES HOOK END ===/d' "$hook_file"
        rm "$hook_file.bak"

        # remove file if only comments and empty lines remain
        if [[ ! -s "$hook_file" ]] || ! grep -vE '^\s*$|^\s*#' "$hook_file" > /dev/null; then
            rm "$hook_file"
            echo "üóëÔ∏è Removed empty prepare-commit-msg hook from $(basename "$repo_path")"
        else
            echo "üóëÔ∏è Removed dotfiles prepare-commit-msg block from $(basename "$repo_path")"
        fi
    else
        echo "‚ÑπÔ∏è  No dotfiles prepare-commit-msg block found in $(basename "$repo_path")"
    fi
}

_check_hook_status() {
    local repo_path="${1:-.}"
    local hook_file="$repo_path/.git/hooks/prepare-commit-msg"

    echo "üîç Checking prepare-commit-msg hook status in $(basename "$repo_path"):"
    
    if [ ! -f "$hook_file" ]; then
        echo "‚ùå No prepare-commit-msg hook found"
        return 1
    fi
    
    if grep -q "DOTFILES HOOK START" "$hook_file"; then
        echo "‚úÖ Dotfiles prepare-commit-msg hook is installed"
        echo "üìÑ Hook file: $hook_file"
        if [ -x "$hook_file" ]; then
            echo "‚úÖ prepare-commit-msg hook is executable"
        else
            echo "‚ùå prepare-commit-msg hook is not executable"
        fi
    else
        echo "‚ö†Ô∏è  prepare-commit-msg hook exists but not from dotfiles"
        echo "üìÑ Hook file: $hook_file"
    fi
}

main() {
    ACTION="set"
    REPO_PATH="."

    while [[ $# -gt 0 ]]; do
        case "$1" in
            --set)
                ACTION="set"
                shift 1
                ;;
            --unset)
                ACTION="unset"
                shift 1
                ;;
            --status)
                ACTION="status"
                shift 1
                ;;
            --help|-h)
                echo "Usage: $0 [--set|--unset|--status] [repo-path]"
                echo "  --set      Install prepare-commit-msg hook (default)"
                echo "  --unset    Remove prepare-commit-msg hook"
                echo "  --status   Check hook installation status"
                echo "  repo-path  Path to git repo (default: current dir)"
                exit 0
                ;;
            *)
                if [[ "$REPO_PATH" != "." ]]; then
                    echo "‚ùå Error: multiple repo paths provided ($REPO_PATH and $1)"
                    exit 1
                fi
                REPO_PATH="$1"
                shift
                ;;
        esac
    done

    # Validate and normalize repo path
    if [ ! -d "$REPO_PATH" ]; then
        echo "‚ùå Error: Directory $REPO_PATH does not exist"
        exit 1
    fi
    
    REPO_PATH=$(cd "$REPO_PATH" && pwd)

    if [ ! -d "$REPO_PATH/.git" ]; then
        echo "‚ùå Error: $REPO_PATH is not a git repository"
        exit 1
    fi

    case "$ACTION" in
        "unset")
            _remove_prepare_commit_msg_hook "$REPO_PATH"
            ;;
        "status")
            _check_hook_status "$REPO_PATH"
            ;;
        "set")
            echo "üîß Setting up prepare-commit-msg hook in: $(basename "$REPO_PATH")"
            _setup_prepare_commit_msg_hook "$REPO_PATH"
            echo "üéâ prepare-commit-msg hook setup completed!"
            ;;
    esac
}

main "$@"
