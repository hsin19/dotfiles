#!/bin/bash

# Git hook: prepare-commit-msg
# Auto-triggered by git commit
# Adds Jira ticket prefix from branch name

set -euo pipefail

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source library modules
source "$SCRIPT_DIR/lib/error-handler.sh"
source "$SCRIPT_DIR/lib/git-utils.sh"
source "$SCRIPT_DIR/lib/git-commit.sh"

# Main function
main() {
    local commit_msg_file=$1
    local commit_source=${2:-}
    local sha1=${3:-}
    local original_msg
    local modified_msg
    
    setup_error_handling
    
    # Skip processing for merge commits, squash, etc.
    if [ -n "$commit_source" ] && [ "$commit_source" != "message" ]; then
        exit 0
    fi
    
    if [ -z "$commit_msg_file" ]; then
        echo "Error: Missing commit message file parameter" >&2
        exit 1
    fi
    
    if [ ! -f "$commit_msg_file" ]; then
        echo "Error: Commit message file does not exist: $commit_msg_file" >&2
        exit 1
    fi
    
    # Check if we're in a git repository (but don't exit, just warn)
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "Warning: Not in a git repository" >&2
        exit 0
    fi
    
    if ! original_msg=$(cat "$commit_msg_file"); then
        echo "Error: Failed to read commit message file" >&2
        exit 1
    fi
    
    # Extract input commit content based on commit_source
    if [ -z "$commit_source" ]; then
        # This is plain 'git commit' - remove Git's auto-generated comment lines
        input_commit=$(echo "$original_msg" | grep -v '^#' | sed '/^\s*$/d' || true)
    else
        # This is user input (git commit -m), keep everything including lines starting with #
        input_commit="$original_msg"
    fi
    
    if ! modified_msg=$(generate_commit_message "$input_commit"); then
        echo "Error: Failed to process commit message" >&2
        exit 1
    fi
    
    # Only write to file if message has changed
    if [ "$input_commit" != "$modified_msg" ]; then
        if ! echo "$modified_msg" > "$commit_msg_file"; then
            echo "Error: Failed to write commit message file" >&2
            exit 1
        fi
    fi
    
    exit 0
}

# Only run main if this script is executed directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
