#!/bin/bash

# Auto commit tool with AI-powered commit message generation
# Usage: 
#   ./ai-commit                        - Generate AI commit message automatically
#   ./ai-commit "message"              - Commit with custom message  
#   ./ai-commit "# custom prompt"      - Generate AI message with custom prompt
# Args: 
#   message     Commit message or AI prompt (starting with #) (optional)

set -euo pipefail

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source library modules
source "$SCRIPT_DIR/lib/git-commit.sh"

# Function to show usage
_show_usage() {
    echo "Usage: ai-commit [MESSAGE]"
    echo ""
    echo "BEHAVIOR:"
    echo "  - No message: AI generates commit message from git diff"
    echo "  - Message starts with #: Guide AI to emphasize specific aspects"
    echo "  - Regular message: Use as-is for commit"
    echo ""
    echo "EXAMPLES:"
    echo "  ai-commit                                         # AI generates message"
    echo "  ai-commit \"fix: resolve bug\"                    # Use custom message"
    echo "  ai-commit \"# focus on performance improvements\" # Guide AI emphasis"
    echo "  ai-commit \"# main change is refactoring\"        # Guide AI to highlight refactor"
    echo ""
    echo "ENVIRONMENT VARIABLES:"
    echo "  OPENAI_API_KEY    OpenAI API key for GPT-based generation"
    echo ""
    echo "REQUIREMENTS:"
    echo "  - For AI: claude CLI, gemini CLI, or OpenAI API key"
    echo "  - For OpenAI: curl and jq commands"
}

# Function to stage files
_stage_files() {
    if ! git diff --cached --quiet; then
        return 0
    fi
    
    echo "ℹ️  No staged changes found. Staging all changes..."
    git add .
    
    if git diff --cached --quiet; then
        # Still no staged changes after git add
        echo "❌ No changes to stage"
        return 1
    else
        echo "✅ All changes staged"
        return 0
    fi
}

# Main function
main() {
    local commit_message=""
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                _show_usage
                exit 0
                ;;
            -*)
                echo "❌ Unknown option: $1" >&2
                _show_usage >&2
                exit 1
                ;;
            *)
                commit_message="$1"
                shift
                ;;
        esac
    done
    
    # Check if we're in a git repository
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "❌ Error: Not in a git repository" >&2
        exit 1
    fi
    
    echo "🚀 Starting git commit process..."
    
    # Stage files
    _stage_files
    
    # Check if there are staged changes
    if ! git diff --cached --quiet; then
        # Generate/process commit message
        local processed_message
        if ! processed_message=$(generate_commit_message "$commit_message"); then
            echo "❌ Failed to process commit message" >&2
            exit 1
        fi

        # Build git commit command with multiple -m flags for multi-line messages
        local -a commit_args=()
        local current_paragraph=""

        # Read message line by line and group into paragraphs
        while IFS= read -r line || [ -n "$line" ]; do
            if [ -z "$line" ]; then
                # Empty line - commit current paragraph if exists
                if [ -n "$current_paragraph" ]; then
                    commit_args+=("-m" "$current_paragraph")
                    current_paragraph=""
                fi
            else
                # Add line to current paragraph
                if [ -n "$current_paragraph" ]; then
                    current_paragraph="$current_paragraph"$'\n'"$line"
                else
                    current_paragraph="$line"
                fi
            fi
        done <<< "$processed_message"

        # Don't forget the last paragraph
        if [ -n "$current_paragraph" ]; then
            commit_args+=("-m" "$current_paragraph")
        fi

        # Commit with processed message(s)
        if git commit "${commit_args[@]}"; then
            echo "✅ Committed with message:"
            printf "%s\n" "$processed_message"
        else
            echo "❌ Failed to commit" >&2
            exit 1
        fi
    else
        echo "⚠️ No staged changes to commit"
        exit 0
    fi
    
    echo "🎉 Git commit process completed!"
}

# Only run main if this script is executed directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
